<?xml version="1.0"?>
<launch>

  <!-- Map server -->
  <!-- <arg name="map_file" default="$(find skid_steer_bot)/maps/jackal_race.yaml"/> -->
  <!-- <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" /> -->

  <!-- imu launcher-->
  <include file="$(find mpu9250_node)/launch/mpu9250.launch"/>

  <node pkg="skid_steer_bot" name="left_Motor_Control" type="left_Motor_Control.py" output="screen"/>
  <node pkg="skid_steer_bot" name="right_Motor_Control" type="right_Motor_Control.py" output="screen"/>
  <node pkg="skid_steer_bot" name="vel_converter" type="vel_converter.py" output="screen"/>
  <node pkg="skid_steer_bot" name="encoder_driver" type="encoder_driver.py" output="screen"/>
  <node pkg="skid_steer_bot" name="planner" type="planner.py" output="screen"/>

  <!-- Place map frame at odometry frame -->
  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />
  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

  <node name="right_pid" pkg="pid" type="controller" output="screen" >
    <param name="Kp" value="4.0" />
    <param name="Ki" value="0.0" />
    <param name="Kd" value="0.0" />
    <param name="rate" value="20" />
    <param name="upper_limit" value="10" />
    <param name="lower_limit" value="-10" />
    <param name="windup_limit" value="10" />
    <param name="cutoff_frequency" value="20" />
    <param name="diagnostic_period" value="0.25" />
    <param name="topic_from_controller" value="control/right" />
    <param name="topic_from_plant" value="vel/right" />
    <param name="setpoint_topic" value="setpoint/right" />

  </node>

  <node name="left_pid" pkg="pid" type="controller" output="screen" >
    <param name="Kp" value="4.0" />
    <param name="Ki" value="0.0" />
    <param name="Kd" value="0.0" />
    <param name="rate" value="20" />
    <param name="upper_limit" value="10" />
    <param name="lower_limit" value="-10" />
    <param name="windup_limit" value="10" />
    <param name="cutoff_frequency" value="20" />
    <param name="diagnostic_period" value="0.25" />
    <param name="topic_from_controller" value="control/left" />
    <param name="topic_from_plant" value="vel/left" />
    <param name="setpoint_topic" value="setpoint/left" />

  </node>

  <!-- Localization-->
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <remap from="scan" to="skid_steer_bot/laser/scan"/>

    <!-- Time with which to post-date the transform that is published, to
    indicate that this transform is valid into the future. -->
    <param name="transform_tolerance" value="0.1" /> <!-- 0.1 -->
    <!-- Allowed number of particles -->
    <param name="min_particles" value="50"/> <!-- 500 -->
    <param name="max_particles" value="500"/> <!-- 5000 -->
    <!-- Translational (d), rotational (a) movement required before performing a filter update. -->
    <!-- lower values impacts how accurate the particles are predicted to the actual bots position -->
    <param name="update_min_d" value="0.1"/> <!-- 0.2 -->
    <param name="update_min_a" value="0.13"/> <!-- Ï€/6.0 radians 0.5236 -->
    <!-- Number of filter updates required before resampling. -->
    <param name="resample_interval" value="2"/> <!-- 2 -->
    <!-- Initial pose mean (x, y, a), used to initialize filter with Gaussian distribution. -->
    <param name="initial_pose_x" value="0.0"/> <!-- 0.0 -->
    <param name="initial_pose_y" value="0.0"/> <!-- 0.0 -->
    <param name="initial_pose_a" value="0.0"/> <!-- 0.0 -->
    <!-- Initial covariance (xx, yy, aa), used to initialize filter with Gaussian distribution. -->
    <param name="initial_cov_xx" value="1.0"/> <!-- 0.0 -->
    <param name="initial_cov_yy" value="1.0"/> <!-- 0.0 -->
    <param name="initial_cov_aa" value="1.0"/> <!-- 0.0 -->

    <param name="kld_err" value="0.05"/>
    <param name="kld_z" value="0.99"/>

    <param name="gui_publish_rate" value="10.0"/>   <!-- 10.0 -->

    <!-- Laser parameters -->
    <param name="laser_model_type" value="likelihood_field"/>
    <!-- <param name="laser_model_type" value="beam"/> -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <!-- Scan range to be considered; -1.0 will cause the laser's reported minimum
    range to be used. -->
    <param name="laser_min_range" value="-1"/> <!-- -1 -->
    <param name="laser_max_range" value="-1"/> <!-- -1 -->
    <!-- How many evenly-spaced beams in each scan to be used when updating the filter. -->
    <param name="laser_max_beams" value="30"/> <!-- 30 -->
    <!-- Mixture weight for the z_xxx part of the model. -->
    <param name="laser_z_hit" value="0.95"/> <!-- 0.95 -->
    <param name="laser_z_short" value="0.1"/> <!-- 0.1 -->
    <param name="laser_z_max" value="0.05"/> <!-- 0.05 -->
    <param name="laser_z_rand" value="0.05"/> <!-- 0.05 -->
    <!-- Standard deviation for Gaussian model used in z_hit part of the model. -->
    <param name="laser_sigma_hit" value="0.2"/> <!-- 0.2 -->
    <!-- Exponential decay parameter for z_short part of model. -->
    <param name="laser_lambda_short" value="0.1"/> <!-- 0.1 -->

    <param name="resample_interval" value="1"/>

    <!-- Odometry model parameters -->
    <!-- Which model to use, either "diff", "omni", "diff-corrected" or "omni-corrected". -->
    <param name="odom_model_type" value="diff"/> <!-- diff -->
    <!-- Which frame to use for odometry. -->
    <param name="odom_frame_id" value="odom"/> <!-- odom -->
    <!-- Which frame to use for the robot base -->
    <param name="base_frame_id" value="robot_footprint"/>
    <!-- The name of the coordinate frame published by the localization system -->
    <param name="global_frame_id" value="map"/>
    <!-- Specifies the expected noise in odometry's rotation estimate from the
    rotational component of the robot's motion. -->
    <!-- 1 expected noise in odometry's rotation estimate from the rotational component -->
    <param name="odom_alpha1" value="0.5"/> <!-- 0.2 -->
    <!-- 2 expected noise in odometry's rotation estimate from the translational component -->
    <param name="odom_alpha2" value="0.4"/> <!-- 0.2 -->
    <!-- 3 expected noise in odometry's translation estimate from the translational component -->
    <param name="odom_alpha3" value="0.1"/> <!-- 0.2 -->
    <!-- 4 expected noise in odometry's translation estimate from the rotational component -->
    <param name="odom_alpha4" value="0.4"/> <!-- 0.2 -->
    <!-- Translation-related noise parameter (only used if model is "omni"). -->
    <param name="odom_alpha5" value="0.2"/> <!-- 0.2 -->

  </node>

  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="data_raw" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>

  <!-- Move base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find skid_steer_bot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find skid_steer_bot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find skid_steer_bot)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find skid_steer_bot)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find skid_steer_bot)/config/base_local_planner_params.yaml" command="load" />

    <remap from="cmd_vel" to="cmd_vel"/>
    <remap from="odom" to="odom"/>
    <remap from="scan" to="skid_steer_bot/laser/scan"/>

    <!-- A fast, interpolated global planner built as a more flexible replacement to navfn.
    (navfn/NavfnROS, global_planner/GlobalPlanner, carrot_planner/CarrotPlanner) -->
    <param name="base_global_planner" type="string" value="global_planner/GlobalPlanner" />

    <!-- provides an interface for local planners used in navigation -->
    <!-- base_local_planner/TrajectoryPlannerROS, eband_local_planner/EBandPlannerROS, teb_local_planner/TebLocalPlannerROS  -->
    <!-- sudo apt-get install ros-kinetic-eband-local-planner -->
    <!-- sudo apt-get install ros-kinetic-teb-local-planner -->
    <!-- <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/> -->
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
    <!-- <param name="base_local_planner" value="eband_local_planner/EBandPlannerROS"/> -->
    <param name="controller_frequency" value="30.0" />
    <param name="planner_frequency" value="10.0" />


  </node>


</launch>
